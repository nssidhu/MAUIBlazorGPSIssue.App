@page "/fetchdata"

@using MAUIBlazorGPSIssue.Data
@inject WeatherForecastService ForecastService
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h1>Google Map</h1>
<div >
	<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="100%"></GoogleMap>
</div>

<button @onclick="AddMarker">Add marker</button>


@code {
	private GoogleMap map1;
	private MapOptions mapOptions;
    private Stack<Marker> markers = new Stack<Marker>();

    private List<String> _events = new List<String>();


    private string labelText = "";

	protected override void OnInitialized()
	{
		mapOptions = new MapOptions()
			{
				Zoom = 13,
				Center = new LatLngLiteral()
				{
					Lat = 13.505892,
					Lng = 100.8162
				},
				MapTypeId = MapTypeId.Roadmap
			};
	}		

	 private async Task AddMarker()
    {
        var marker = await Marker.CreateAsync(map1.JsRuntime, markers.Count() % 2 == 0 ?
            new MarkerOptions()
            {
                Position = await map1.InteropObject.GetCenter(),
                Map = map1.InteropObject,
                Label = new MarkerLabel { Text = $"Test {markers.Count()}", FontWeight = "bold" },
                Draggable=true,
                Icon = new Icon()
                {
                    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                }
                //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            } :
            new MarkerOptions()
            {
                Position = await map1.InteropObject.GetCenter(),
                Map = map1.InteropObject,
                Label = $"Test {markers.Count()}",
                Draggable=true,
                Icon = new Icon()
                {
                    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                }
                //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            });

        //await marker.SetMap(map1);

        //var map = await marker.GetMap();

        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        //if (map == map1.InteropObject)
        //{
        //    Console.WriteLine("Yess");
        //}
        //else
        //{
        //    Console.WriteLine("Nooo");
        //}

        markers.Push(marker);
        labelText = await marker.GetLabelText();

        await marker.AddListener<MouseEvent>("click", async e =>
        {
            string markerLabelText = await marker.GetLabelText();
            _events.Add("click on " + markerLabelText);
            StateHasChanged();

            await e.Stop();
        });
    }

}
